use clap::{ArgAction, Parser};
use ini::Ini;
use notify_rust::{Hint, Notification, Timeout};
use std::io::Write;
use std::{thread, time};

#[derive(Parser)]
struct Time {
    /// Enter hours for the timer.
    #[arg(long, short = 'r', default_value_t = 0)]
    hour: i16,

    /// Enter minutes for the timer.
    #[arg(short, long, default_value_t = 0)]
    minute: i16,

    /// Enter seconds for the timer.
    #[arg(short, long, default_value_t = 0)]
    second: i16,

    /// Use if you want a timer beep.
    #[arg(short, long, action=ArgAction::SetTrue)]
    beep: bool,

    /// Use if you do not want a timer notification.
    #[arg(short, long, action=ArgAction::SetFalse)]
    notification: bool,
}

fn read_ini() -> (bool, bool) {
    let conf = Ini::load_from_file("/home/fribbit/.config/cli-timer/conf.ini").unwrap();
    let section = conf.section(Some("Config")).unwrap();
    let beep = section.get("beep").unwrap();
    let notification = section.get("notification").unwrap();
    let notification_truth: bool = match notification {
        "true" => true,
        "false" => false,
        _ => false,
    };
    let beep_truth: bool = match beep {
        "true" => true,
        "false" => false,
        _ => false,
    };
    (notification_truth, beep_truth)
}

fn format_time(hour: i16, minute: i16, second: i16) -> String {
    format!("{:02}:{:02}:{:02}", hour, minute, second)
}

fn timer(mut hour: i16, mut minute: i16, mut second: i16) -> bool {
    let mut total_time = hour * 3600 + minute * 60 + second;
    let one_second = time::Duration::from_secs(1);
    while total_time > 0 {
        total_time -= 1;
        print!("\r{}", format_time(hour, minute, second));
        let _ = std::io::stdout().flush();
        if second == 0 && minute == 0 && hour == 0 {
            break;
        } else if second > 00 {
            second -= 1;
        } else if second == 00 {
            minute -= 1;
            second = 59;
        } else if minute == 00 && hour > 00 {
            hour -= 1;
            minute = 59;
        }
        thread::sleep(one_second);
    }
    return true;
}

fn main() {
    let time: Time = Time::parse();

    let hour = time.hour;
    let minute = time.minute;
    let second = time.second;
    let config = read_ini();
    let beep_truth = config.1;
    let notification_truth = config.0;
    let beep = time.beep.unwrap_or(beep_truth);
    let notification = time.notification.unwrap_or(notification_truth);

    timer(hour, minute, second);

    if notification == true {
        Notification::new()
            .summary("Time is up!")
            //.body("")
            .icon("dialog-information")
            .appname("cli-timer")
            .hint(Hint::Category("Device".to_owned()))
            .timeout(Timeout::Milliseconds(5000))
            .show()
            .unwrap();
    }
}
